{"mappings":"8vBAAMA,IAkESA,EAlETA,oBACNA,iGAAaC,CAAAC,KAAAF,GACbE,KAAKC,WAAW,IAAIC,IAAI,CAAC,IAAI,iEAG7BC,MAAA,SAA2BC,GAC3B,IAAAC,EAAAL,KAE2BI,EAAWE,MADhB,cAGCC,SAAQ,SAACC,GACxBA,EAAaA,EAAaC,UAAU,EAAED,EAAaE,OAAO,GAC1DL,EAAKJ,WAAWU,IAAIH,MAExB,IAAII,EAA2BR,EAAWS,OAAX,OAC/B,OAAOT,EAAWU,OAAOF,EAA2B,oCAExDT,MAAA,SAAwBY,GAEpB,QAAGf,KAAKC,WAAWe,IAAID,qCAK3BZ,MAAA,SAAyBc,OAErB,IAAIF,EAAkB,GAChBE,EAASP,OAAO,GAEfQ,MAAMD,EAAS,KACdF,GAAmBE,EAASE,QAIpC,OAAOJ,uCAGXZ,MAAA,SAA4Bc,OACxB,IACIF,EADAK,EAAU,GAERH,EAASP,OAAO,IAElBK,EAAkBf,KAAKqB,yBAAyBJ,IAC7CjB,KAAKsB,wBAAwBP,KAEhCK,GAAWH,EAASE,QAExB,OAAOI,SAASH,uBAGpBjB,MAAA,SAAWC,GAEW,KAAfA,EAAW,KACVA,EAAWJ,KAAKwB,2BAA2BpB,QAC/C,IAAIa,EAASb,EAAWqB,MAAM,IAC1BC,EAAW,EACTT,EAASP,OAAO,GACtB,CACI,IAAIiB,EAAgB3B,KAAK4B,4BAA4BX,GAClDU,GAAiB,MAChBD,GAAYC,GAGpB,OAAOD,uFA/DL5B,0BCCN,MAAA+B,KAAAC,EAAA,sCAEA,IAAMC,EAAcC,SAASC,cAAc,gBACrCC,EAAOF,SAASC,cAAc,eAC9BE,EAAMH,SAASC,cAAc,kBAEnCC,EAAKE,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAEN,IAAMC,EAAmBR,EAAY5B,MAErCgC,EAAIK,UAAY,OAAA,EAAQX,EAAA,SAAUU,GAAoB","sources":["src/stringAdder.js","src/presenter.js"],"sourcesContent":["class stringCalculator{\nconstructor(){\nthis.Separators=new Set([\",\",\"-\"]);\n}\n\nextractCustomSeparatorFrom(userString)\n{\n    const SeparatorExp =/\\[(.*?)\\]/g\n    let NewSeparatorsArray=userString.match(SeparatorExp)\n\n    NewSeparatorsArray.forEach((NewSeparator)=>{\n        NewSeparator=NewSeparator.substring(1,NewSeparator.length-1)\n        this.Separators.add(NewSeparator);\n    })\n    let EndOfCustomSeparatorsIndex=userString.search(/\\n/g)\n    return userString.substr(EndOfCustomSeparatorsIndex+2)\n}\ncheckIfSeparatorIsValid(PossibleSeparator)\n{\n    if(this.Separators.has(PossibleSeparator))\n        return true\n    else\n        return false\n}\nextractNextSeparatorFrom(StrArray)\n{\n    let PossibleSeparator=\"\";\n    while(StrArray.length>0)\n    {\n        if(isNaN(StrArray[0]))\n            PossibleSeparator+=StrArray.shift()\n        else\n            break;\n    }\n    return PossibleSeparator\n    \n}\nextractNumberUntilSeparator(StrArray){\n    let NumberStr=\"\"\n    let PossibleSeparator;\n    while(StrArray.length>0)\n    {\n        PossibleSeparator=this.extractNextSeparatorFrom(StrArray)\n        if(this.checkIfSeparatorIsValid(PossibleSeparator))\n            break;\n        NumberStr+=StrArray.shift();\n    }\n    return parseInt(NumberStr)\n}\n\ngetSumFrom(userString)\n{\n    if(userString[0]==\"/\")\n        userString=this.extractCustomSeparatorFrom(userString)\n    let StrArray=userString.split(\"\");\n    let TotalValue=0;\n    while(StrArray.length>0)\n    {\n        let RetrievedNumber=this.extractNumberUntilSeparator(StrArray)\n        if(RetrievedNumber<=1000)\n            TotalValue+=RetrievedNumber;\n    }\n    \n    return TotalValue;\n}\n}\nexport default stringCalculator;","\nimport sumString from \"./stringAdder.js\";\n\nconst StringField = document.querySelector(\"#StringField\");\nconst form = document.querySelector(\"#sumar-form\");\nconst div = document.querySelector(\"#resultado-div\");\n\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const StringToBeSummed = StringField.value;\n\n  div.innerHTML = \"<p>\" + sumString(StringToBeSummed) + \"</p>\";\n});\n"],"names":["stringCalculator","$e19571058cf5a6af$var$_classCallCheck","this","Separators","Set","value","userString","_this","match","forEach","NewSeparator","substring","length","add","EndOfCustomSeparatorsIndex","search","substr","PossibleSeparator","has","StrArray","isNaN","shift","NumberStr","extractNextSeparatorFrom","checkIfSeparatorIsValid","parseInt","extractCustomSeparatorFrom","split","TotalValue","RetrievedNumber","extractNumberUntilSeparator","$89b0829c857563b6$var$_stringAdder","parcelRequire","StringField","document","querySelector","form","div","addEventListener","event","preventDefault","StringToBeSummed","innerHTML"],"version":3,"file":"index.e1cc1160.js.map"}